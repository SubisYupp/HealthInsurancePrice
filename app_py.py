# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1whvFhlfxRcxYUv6A4jF_usv8e0GLp1Z2
"""

import pandas as pd
import numpy as np
import streamlit as st
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Load the dataset
df = pd.read_csv("insurance.csv")

# Data preprocessing
df.replace({'sex': {'male': 0, 'female': 1}}, inplace=True)
df.replace({'smoker': {'yes': 0, 'no': 1}}, inplace=True)
df.replace({'region': {'southeast': 0, 'southwest': 1, 'northeast': 2, 'northwest': 3}}, inplace=True)

# Split the dataset into X and Y
X = df.drop('charges', axis=1)
Y = df['charges']

# Split X and Y into train and test
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Train the linear regression model
regr = LinearRegression()
regr.fit(X_train, Y_train)

# Streamlit App
st.markdown(
    """
    <style>
        .title-container {
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
            padding: 10px;
            background-color: white;
            border-radius: 5px;
        }
    </style>
    """,
    unsafe_allow_html=True
)
st.markdown('<h1 class="title-container">Health Insurance Cost Prediction</h1>', unsafe_allow_html=True)

# User Input
st.sidebar.header("User Input Features")

def user_input():
    age = st.sidebar.slider("Age", min_value=18, max_value=64, value=25)
    sex = st.sidebar.radio("Sex", ["Male", "Female"])
    bmi = st.sidebar.slider("BMI", min_value=15.0, max_value=50.0, value=25.0)
    children = st.sidebar.slider("Number of Children", min_value=0, max_value=5, value=0)
    smoker = st.sidebar.radio("Smoker", ["Yes", "No"])
    region = st.sidebar.selectbox("Region", ["Southeast", "Southwest", "Northeast", "Northwest"])

    sex = 1 if sex == "Female" else 0
    smoker = 0 if smoker == "Yes" else 1
    region = {"Southeast": 0, "Southwest": 1, "Northeast": 2, "Northwest": 3}[region]

    return age, sex, bmi, children, smoker, region

user_values = user_input()

# Make prediction
input_data_as_numpy = np.asarray(user_values)
input_reshaped = input_data_as_numpy.reshape(1, -1)
prediction = regr.predict(input_reshaped)

# Display prediction
st.write("Estimated Insurance Cost:", prediction[0])

# Optional: Display model performance
st.sidebar.subheader("Model Performance")
st.sidebar.text(f"R2 Score on Test Data: {metrics.r2_score(Y_test, regr.predict(X_test))}")
st.sidebar.text(f"R2 Score on Training Data: {metrics.r2_score(Y_train, regr.predict(X_train))}")
